{"version":3,"sources":["../node_modules/bs58/index.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/errors.ts","../../src/connection.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../node_modules/base-x/src/index.js","../node_modules/borsh/lib/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../../src/Layout.ts","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/@solana/web3.js/node_modules/secp256k1/elliptic.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/index.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/elliptic.js","../../src/PrivateKeyWallet.ts","../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/providerHandlers.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../../src/structs/coercions.ts"],"names":["basex","require","module","exports","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","ownKeys","object","enumerableOnly","keys","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","create","inherits_browserModule","ctor","superCtor","super_","constructor","value","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","charCodeAt","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","Hash","inner","outer","_init","hmac","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","form","normalize","join","String","fromCharCode","message","_checkNormalize","HEX","Logger","version","logLevel","args","level","toLowerCase","throwArgumentError","console","log","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","kind","censorship","permanent","globalLogger","warn","logger","addSlice","array","isInteger","arrayify","options","checkSafeUint53","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Map","PublicKey","_bn","undefined","isPublicKeyData","decoded","bs58","decode","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","alloc","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","set","fields","naclLowLevel","nacl","lowlevel","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","property","BufferLayout","rustString","rsl","_decode","bind","_encode","rslShim","offset","str","chars","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","map","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","signatures","feePayer","nonceInfo","_message","_json","signature","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","secretKey","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","status","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","all","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","ComputeBudgetProgram","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","entries","methods","Request","input","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","nullable","epoch","effectiveSlot","amount","postBalance","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","byIdentity","range","firstSlot","lastSlot","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","state","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","root","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","PerfSampleResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","feeCalculator","lamportsPerSignature","lastValidBlockHeight","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","keypair","_keypair","keyPair","fromSecretKey","skipValidation","TextEncoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","publicKeyCreate","secp256k1","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","_Buffer","ALPHABET","BASE_MAP","charAt","xc","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","__createBinding","o","k2","__setModuleDefault","__decorate","decorators","desc","Reflect","decorate","__importStar","mod","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeUInt8","writeUInt16LE","writeUInt32LE","writeBuffer","subarray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readUInt8","readUInt16LE","readUInt32LE","readBuffer","readU32","capitalizeFirstLetter","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","field","idx","deserializeField","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","inRange","min","max","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","n","u","stringToCodePoints","checkUint8Array","uint8ArrayToBuffer","buffer_1","Number","rv","nameWithProperty","Class","layout_","boundConstructor_","makeDestinationObject","ExternalLayout","GreedyCount","elementSpan","rem","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","isCount","getSpan","elo","reduce","Structure","decodePrefixes","acc","fd","fsp","dest","firstOffset","lastOffset","lastWrote","fv","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","fromArray","fixBitwiseResult","BitStructure","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","container","totalBits","usedBits","sum","valueMask","wordMask","wordValue","srcBuffer","write","CString","srcb","UTF8","maxSpan","Constant","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","_super","_ref","_ref$autoconnect","autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","max_reconnects","generate_request_id","WebSocketBrowserImpl","_EventEmitter","protocols","_this","socket","window","WebSocket","onopen","emit","onmessage","event","onclose","optionsOrCallback","cb","close","listener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","notification","listeners","clearTimeout","_ref2","uuid","v4","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","isError","cond","isUint8Array","numbers","isCompressed","toTypeString","getAssertedOutput","output","contextRandomize","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyVerify","compressed","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","noncefn","ecdsaVerify","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","loadPublicKey","first","cmp","toRed","red","redSqr","redIMul","redIAdd","redSqrt","isOdd","redNeg","pub","loadCompressedPublicKey","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pairs","isInfinity","mul","nh","sigR","sigS","lenR","posR","lenS","posS","_noncefn","counter","canonical","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","getX","getY","PrivateKeyWallet","provider","_defineProperty","signAndSendTransaction","signTransaction","signedTx","signAllTransactions","signMessage","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getAccounts","createAsyncMiddleware","requestAccounts","targetMethod","createSolanaMiddleware","providerHandlers","getPrivateKey","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","createInjectedProviderProxyMiddleware","_next","getPhantomHandlers","injectedProvider","ethErrors","methodNotSupported","txn","_req$params","txRes","_req$params2","_req$params3","invalidParams","txns","decodedMsg","PhantomInjectedProvider","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","setupProvider","solanaMiddleware","configMiddleware","injectedProviderProxy","engine","JRPCEngine","providerFromEngine","updateProviderEngineProxy","lookupNetwork","BaseProvider","getTorusHandlers","sendTx","_req$params4","_req$params5","messages","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","custom","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","on","configure","getProviderHandlers","privKey","getProviderEngineProxy","transactionGenerator","serializedTx","decodedTx","keyPairGenerator","signedMsg","_providerEngineProxy","_req$params6","_req$params7","signedTransactions","tx","SolanaPrivateKeyProvider","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","_ref3","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","createAccountMiddleware","_ref4","providerFactory","SolanaWallet","signedTransaction","toFailures","run","StructError","failure","failures","cached","rest","path","isObject","print","shiftIterator","toFailure","struct","branch","refinement","mask","coercer","valid","validator","ts","refiner","props","is","validate","tuples","define","Element","constant","description","never","isNaN","Key","Value","Elements","Never","Structs","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest"],"mappings":"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","file":"static/js/11.da1f2acb.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (this._message) {\n      if (JSON.stringify(this.toJSON()) !== JSON.stringify(this._json)) {\n        throw new Error(\n          'Transaction message mutated after being populated from Message',\n        );\n      }\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: number;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        BufferLayout.ns64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'RequestUnits' | 'RequestHeapFrame';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n\n  /** Additional fee to pay */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport crossFetch from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: typeof crossFetch,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : crossFetch;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: typeof crossFetch;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\nfunction createSubscriptionWarningMessage(id: number, label: string): string {\n  return (\n    'Ignored unsubscribe request because an active subscription ' +\n    `with id \\`${id}\\` for '${label}' events could not be found.`\n  );\n}\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction({\n        recentBlockhash: originalTx.recentBlockhash,\n        nonceInfo: originalTx.nonceInfo,\n        feePayer: originalTx.feePayer,\n        signatures: [...originalTx.signatures],\n      });\n      transaction.instructions = transactionOrMessage.instructions;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._logsSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(createSubscriptionWarningMessage(id, 'account change'));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(\n        createSubscriptionWarningMessage(id, 'program account change'),\n      );\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (this._logsSubscriptions[id]) {\n      const subInfo = this._logsSubscriptions[id];\n      delete this._logsSubscriptions[id];\n      await this._unsubscribe(subInfo, 'logsUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(createSubscriptionWarningMessage(id, 'logs'));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(createSubscriptionWarningMessage(id, 'slot change'));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(createSubscriptionWarningMessage(id, 'slot update'));\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(createSubscriptionWarningMessage(id, 'signature result'));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      console.warn(createSubscriptionWarningMessage(id, 'root change'));\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n",null,"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n",null,null,null,null,null,null,null,null,null,null,null,"import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n"],"sourceRoot":""}