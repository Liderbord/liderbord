{"version":3,"sources":["../../src/metamaskAdapter.ts"],"names":["constructor","adapterOptions","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","provider","init","this","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","emit","ADAPTER_EVENTS","options","rehydrated","setAdapterSettings","connect","getChainConfig","adapter","WalletLoginError","method","chainId","reconnected","disconnect","cleanup","metamaskProvider","getUserInfo","switchChain","params","chainConfig","switchError","chainName","rpcUrls"],"mappings":"6RAgCA,E,kDAeIA,SAAFA,IAAuD,0BAA3CC,MAA2C,uDAAF,GAAE,OACrD,eAfgDC,0CAAmBC,QAEhBC,+CAAiBD,QAE/BE,8BAAiBC,UAEhCC,8BAAgBC,UAEHC,gCAAeC,WAMG,iCAJlC,GAIkC,sCAFH,MAI9C,EAAJ,YAAmBT,eAAnB,KAFqD,E,0CAKnDU,WACE,qBAAgBF,IAAhB,WAA4C,KAAhD,iBACS,KAAP,iBAEF,M,IAGEE,SAAQ,GACV,MAAM,UAAN,qB,yDAGIC,WAAI,GAAJA,wEACJ,uEAAAC,MAAA,KAAAA,MADID,SAE2BE,IAAuB,CAAEC,gBAAgB,IAFpEH,UAEJ,sBAFIA,OAGC,KAAL,iBAHIA,sBAG8BI,iBAAN,uCAHxBJ,UAIJ,YAAcH,IAAd,MACKQ,KAAL,KAAUC,IAAV,MAAgCX,IAAhC,UALIK,UAOEO,EAAJ,YAPEP,wBAQKQ,KAAL,cARAR,UASM,KAAN,UATAA,0DAYF,UAAUM,IAAV,cAZEN,0D,uFAgBNS,SAAkB,M,4DAEZC,4FAAO,oFAGN,KAAL,cAAuB,iBAAmBC,YAAenB,IAAD,OAAjC,IAEvB,YAAcK,IAAd,WACA,UAAUS,IAAV,WAAqC,CAAEM,QAASjB,IAAgBC,WAC3D,KAAL,iBAPIc,sBAO8BG,sBAAN,qCAPxBH,gCASI,8BAA8B,CAAEI,OAAQ,wBAT5CJ,UAUkB,KAApB,iBAAQK,UACS,iBAAjB,QAXEL,kCAYM,iBAAiB,KAAvB,aAZAA,WAcFT,KAAA,OAAcJ,IAAd,UACK,KAAL,SAfEa,uBAewBG,sBAAN,mCAflBH,eAgBF,iCAAiC,WAE/B,kBAEF,UAAUJ,IAAV,UAAoC,CAAEM,QAASjB,IAAX,SAAqCqB,YAAa,KAAKR,aApBzFE,kBAqBK,KAAP,UArBEA,wCAwBF,YAAcb,IAAd,MACKW,KAAL,cACA,UAAUF,IAAV,cACMO,oBAAN,wCA3BEH,0D,qHA+BAO,qGAAWV,EAAgC,gCAAEW,SAAS,GACtD,cAAgBrB,IAApB,UADIoB,sBACgDJ,uBAAN,6BAD1CI,OAEJ,QAAKlB,OAAL,8CACIQ,EAAJ,SACE,YAAcV,IAAd,UACKsB,KAAL,uBAGA,YAActB,IAAd,MAGGW,KAAL,cACA,UAAUF,IAAV,cAZIW,gD,sHAeAG,iFACA,cAAgBvB,IAApB,UADIuB,sBACgDP,sBAAN,yDAD1CO,gCAEJ,IAFIA,gD,sHAKQC,WAAW,GAAXA,oEACP,KAAL,iBADYA,sBACsBR,sBAAN,6BADhBQ,gCAGJ,8BAA8B,CAClCP,OADkC,6BAElCQ,OAAQ,CAAC,CAAEP,QAASQ,EAAYR,YALxBM,kEASV,OAAKG,UATKH,kCAUF,8BAA8B,CAClCP,OADkC,0BAElCQ,OAAQ,CAAC,CAAEP,QAASQ,EAAX,QAAgCE,UAAWF,EAA3C,YAAoEG,QAAS,CAACH,EAAD,eAZhFF,4E,4DApGhB","file":"static/js/17.a8abe324.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"],"sourceRoot":""}