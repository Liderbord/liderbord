{"version":3,"sources":["../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js","../../src/messages.ts","../../src/interfaces.ts","../../src/config.ts","../../src/loglevel.ts","../../src/utils.ts","../../src/baseProvider.ts","../../src/embedUtils.ts","../../src/PopupHandler.ts","../../src/communicationProvider.ts","../../src/inPageProvider.ts","../../src/siteMetadata.ts","../../src/embed.ts","../../src/solanaWalletAdapter.ts"],"names":["module","exports","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","isStream","stream","pipe","writable","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","chainId","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","window","loglevel","getWindowId","Math","getTorusUrl","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","h","dualScreenLeft","dualScreenTop","document","left","top","w","jsonRpcStreamName","isDuplexStream","messages","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","req","res","message","data","next","done","error","log","createLoggerMiddleware","origin","location","_rpcEngine","args","params","getRpcPromiseCallback","send","remoteLabel","emitter","warningMsg","logStreamDisconnectWarning","handleEvent","handlerArgs","handlerWrapper","handler","handle","resolve","htmlToElement","html","template","trimmedHtml","features","url","target","getPopupFeatures","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","clearInterval","emit","open","Promise","close","redirect","TorusCommunicationProvider","dappStorageKey","languageTranslations","configuration","userLanguage","userLanguages","config","getUserLanguage","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","isConnected","torusIframe","torusAlertContainer","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","handledWindow","windowId","_displayIframe","style","hideTorusButton","showTorusButton","cb","_payload","errorMessage","_createPopupBlockAlert","logoUrl","torusAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","buttonPosition","hasEmittedConnection","torusWidgetVisibility","initialized","isPermanentlyDisconnected","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","accounts","isInternal","callback","isEthAccounts","finalAccounts","dequal","img","reject","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","getSiteIcon","name","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","storage","x","e","storageAvailable","torusIframeHtml","modalZIndex","requestedLoginProvider","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","setAPIKey","torusIframeUrl","hashParams","handleSetup","dappMetadata","network","isInitialized","login","communicationProvider","provider","loginWithPrivateKey","userInfo","privateKey","success","logout","cleanUp","clearInit","isElement","element","styleLink","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","topupResponse","getAccounts","response","sendTransaction","requireAllSignatures","signTransaction","transaction","messageOnly","parsed","JSON","signature","publicKey","Buffer","signAllTransactions","encodedMessage","tx","responses","signatures","item","transactions","signMessage","getGaslessPublicKey","handleDappStorageKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","err","proxiedInPageProvider","deleteProperty","proxiedCommunicationProvider","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","solanaProvider","tickerName","rpcTarget","blockExplorerUrl","displayName","ticker","logo","chainConfig","getChainConfig","ADAPTER_EVENTS","options","rehydrated","connect","WalletInitializationError","adapter","torusInstance","reconnected","WalletLoginError","disconnect","cleanup","setAdapterSettings"],"mappings":"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","file":"static/js/11.20d937fa.chunk.js","sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { PublicKey } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    const {\n      success\n    } = await this.communicationProvider.request({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo\n      }\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async getAccounts() {\n    const response = await this.provider.request({\n      method: \"getAccounts\",\n      params: []\n    });\n    return response;\n  }\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      params: {\n        message: transaction.serializeMessage().toString(\"hex\"),\n        messageOnly: true\n      }\n    }); // reconstruct signature pair\n\n    const parsed = JSON.parse(response);\n    const signature = {\n      publicKey: new PublicKey(parsed.publicKey),\n      signature: Buffer.from(parsed.signature, \"hex\")\n    };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedMessage = transactions.map(tx => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedMessage,\n        messageOnly: true\n      }\n    }); // reconstruct signature pairs\n\n    const signatures = responses.map(item => {\n      const parsed = JSON.parse(item);\n      return {\n        publicKey: new PublicKey(parsed.publicKey),\n        signature: Buffer.from(parsed.signature, \"hex\")\n      };\n    });\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null,"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, log, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n\n      try {\n        await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n"],"sourceRoot":""}